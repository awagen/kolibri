kolibri {
  actor-system = "testsystem"
  request {
    parallelism = 64
    useTracking = false
  }
  job {
   timeoutInSeconds = 1800
   processingCheckResourcesIntervalInMillis = 100
   runningTasksBaselineCount = 3
   batchDistributionIntervalInMs = 100
   batchMaxTimeToACKInMs = 100
   resources {
   }
   tasks {
     waitForSynchronousTaskCompleteInMs = 100
   }
  }
  cluster {
    statusCheckTimeoutInMillis = 1000
    startClusterSingletonRouter = false
  }
  supervisor {
    maxNumOfRetries = 3
    maxNumOfRetriesWithinTimeInSeconds = 60
    houseKeepingIntervalInSeconds = 10
  }
  execution {
    runnableExecutionHouseKeepingIntervalInSeconds = 10
    jobManagerCheckForCompletionIntervalInSeconds = 5
    useAggregatorBackpressure = true
    aggregatorResultReceiveParallelism = 200
  }
  format {
    metricDocumentFormatType = "parameter"
  }
  writer {
    type = "local"
    dirpath = "/tmp/kolibri-testpath"
  }
}

# overrides for akka-kryo-serialization lib (reference: https://github.com/altoo-ag/akka-kryo-serialization/blob/master/akka-kryo-serialization/src/main/resources/reference.conf)
akka-kryo-serialization {

    #max-buffer-size = 2147483639
    max-buffer-size = -1
    buffer-size = 4096
    post-serialization-transformations = "lz4"
    # kryo-reference-map = true

}

akka {
    actor {
      # enable serialization of messages also between local actors (testing purposes)
      serialize-messages = off
      # verify props are serializable
      serialize-creators = off
      provider = "akka.actor.LocalActorRefProvider"
      serializers {
        # https://doc.akka.io/docs/akka/current/serialization-jackson.html
        jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
        # https://github.com/altoo-ag/akka-kryo-serialization
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "com.google.protobuf.Message" = proto
        "de.awagen.kolibri.datatypes.io.KolibriSerializable" = kryo
      }
      allow-java-serialization = off
    }
}

#custom dispatcher
kolibri-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 8
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 10
}
