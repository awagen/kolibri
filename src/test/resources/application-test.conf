kolibri {
  actor-system = "testsystem"
  request {
    parallelism = 64
    useTracking = false
    useConnectionPoolFlow = false
  }
  job {
   timeoutInSeconds = 1800
   processingCheckResourcesIntervalInMillis = 100
   runningTasksPerJobMaxCount = 3
   runningTasksPerJobDefaultCount = 3
   batchDistributionIntervalInMs = 100
   batchMaxTimeToACKInMs = 100
   resources {
   }
   tasks {
     waitForSynchronousTaskCompleteInMs = 100
   }
  }
  cluster {
    statusCheckTimeoutInMillis = 1000
    startClusterSingletonRouter = false
  }
  supervisor {
    maxNumOfRetries = 3
    maxNumOfRetriesWithinTimeInSeconds = 60
    houseKeepingIntervalInSeconds = 10
  }
  execution {
    runnableExecutionHouseKeepingIntervalInSeconds = 10
    jobManagerCheckForCompletionIntervalInSeconds = 5
    useAggregatorBackpressure = true
    aggregatorResultReceiveParallelism = 200
    useResultElementGrouping = false
    resultElementGroupingCount = 500
    resultElementGroupingIntervalInMs = 500
    resultElementGroupingParallelism = 1
    maxNrBatchRetries = 1
  }
  format {
    metricDocumentFormatType = "parameter"
  }
  persistence {
    mode = "RESOURCE"
    mode = ${?PERSISTENCE_MODE}
    directoryPathSeparator = "/"
    directoryPathSeparator = ${?DIRECTORY_PATH_SEPARATOR}
    csvColumnSeparator = "\t"
    csvColumnSeparator = ${?CSV_COLUMN_SEPARATOR}
    local {
      dir = ${?LOCAL_STORAGE_DIR}
    }
  }
  writer {
    type = "local"
    dirpath = "/tmp/kolibri-testpath"
  }
  internal {
    jobStatusRequestTimeoutInSeconds = 3
    analyzeTimeoutInSeconds = 30
  }
}

# overrides for akka-kryo-serialization lib (reference: https://github.com/altoo-ag/akka-kryo-serialization/blob/master/akka-kryo-serialization/src/main/resources/reference.conf)
akka-kryo-serialization {

    #max-buffer-size = 2147483639
    max-buffer-size = -1
    buffer-size = 4096
    post-serialization-transformations = "lz4"
    # kryo-reference-map = true

}

akka {
    remote {
      log-remote-lifecycle-events = off
      enabled-transports = ["akka.remote.netty.tcp"]
      maximum-payload-bytes = 30000000 bytes
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
        message-frame-size =  30000000b
        send-buffer-size =  30000000b
        receive-buffer-size =  30000000b
        maximum-frame-size = 30000000b
      }
      # needed since otherwise "port already in use". Setting to 0
      # causes each ActorSystem to bind to free port.
      # should normally not happen also in tests due to actor system
      # shutdown after tests, but in case class does not contain tests
      # (e.g temporarily commented out), afterAll method will not be called
      # (and actorSystem thus not stopped)
      artery {
        canonical {
          port=0
          hostname = "127.0.0.1"
        }
      }
    }
    cluster {
#       seed-nodes = [
#         "akka://testsystem@127.0.0.1:9000"
#       ]
      # when running multiple clusters in the same JVM
      jmx.multi-mbeans-in-same-jvm = on
      roles = ["compute"]
      downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
      singleton {
        singleton-name = "routingActor"
        role = "compute"
        hand-over-retry-interval = 1s
        min-number-of-hand-over-retries = 15
        use-lease = ""
        lease-retry-interval = 5s
      }
      singleton-proxy {
        singleton-name = ${akka.cluster.singleton.singleton-name}
        role = "compute"
        singleton-identification-interval = 1s
        buffer-size = 1000
      }
    }
    actor {
      # enable serialization of messages also between local actors (testing purposes)
      serialize-messages = off
      # verify props are serializable
      serialize-creators = off
      provider = "cluster"
      serializers {
        # https://doc.akka.io/docs/akka/current/serialization-jackson.html
        jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
        # https://github.com/altoo-ag/akka-kryo-serialization
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "com.google.protobuf.Message" = proto
        "de.awagen.kolibri.datatypes.io.KolibriSerializable" = kryo
      }
      allow-java-serialization = off
      default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
           parallelism-factor: 0.25,
           parallelism-max: 2,
           parallelism-min: 1
         }
      }
      deployment {
        #see ClusterNode for creation of singleton creation with ClusterSingletonManager
        #singleton holds as soon as actor is created as singleton, routingActor is name of the respective actor and poolRouter the respective router created in the respective actor
        /singleton/routingActor/poolRouter {
          router = cluster-metrics-adaptive-pool
          metrics-selector = load
          cluster {
            enabled = on
            max-nr-of-instances-per-node = 1
            allow-local-routees = on
            use-roles = ["compute"]
          }
        }
        /poolRouter {
            router = cluster-metrics-adaptive-pool
            metrics-selector = load
            # without defining the nr-of-instances and setting the max-nr-of-instances-per-node too high
            # can in high load situations cause non-routing of sent message, thus set reasonable values
            # TODO: haha no this was accidental since both max-nr and nr-of-instances had the same number and all
            # where placed on a single node , which was same as the one where jobmanager locates
            # nr-of-instances = 20
            cluster {
              enabled = on
              max-nr-of-instances-per-node = 1
              allow-local-routees = on
              use-roles = ["compute"]
            }
            pool-dispatcher {
              fork-join-executor.parallelism-min = 5
              fork-join-executor.parallelism-max = 20
            }
        }
      }

    }
}

#custom dispatcher
kolibri-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 0.75
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 5
}

##### akka.discovery and akka.management only needed in case of local cluster needed for test
# config utilized for local cluster forming, referenced in akka.management config
akka.discovery {
    method = config
    config {
      services {
        testsystem { # name should match the name set in akka-management.conf for service-name (https://developer.lightbend.com/docs/akka-management/current/bootstrap/local-config.html)
          endpoints = [
            {
              host = "127.0.0.1"
            }
          ]
        }
      }
    }
  }

# akka management config to enable local cluster forming without setting port
akka.management {

  http.hostname = "127.0.0.1"

  cluster.bootstrap {

    contact-point-discovery {

      required-contact-point-nr = 1

      # Define this name to be looked up in service discovery for "neighboring" nodes
      # If undefined, the name will be extracted from the ActorSystem name
      service-name = "testsystem"

      # Config path of discovery method to be used to locate the initial contact points.
      # It must be a fully qualified config path to the discovery's config section.
      #
      # By setting this to `akka.discovery` we ride on the configuration mechanisms that akka-discovery has,
      # and reuse what is configured for it. You can set it explicitly to something else here, if you want to
      # use a different discovery mechanism for the bootstrap than for the rest of the application.
      discovery-method = akka.discovery

      # Adds "noise" to vary the intervals between retries slightly (0.2 means 20% of base value).
      # Used to avoid multiple modes doing lookup at same intervals
      exponential-backoff-random-factor = 0.2

      # Maximum interval to which the exponential backoff is allowed to grow
      exponential-backoff-max = 15 seconds

      # Timeout for getting a reply from the service-discovery subsystem
      resolve-timeout = 3 seconds
    }

      # Configured how we communicate with the contact point once it is discovered
    contact-point {

      # If some discovered seed node will keep failing to connect for specified period of time,
      # it will initiate rediscovery again instead of keep trying.
      probing-failure-timeout = 3 seconds

      # Interval at which contact points should be polled
      # the effective interval used is this value plus the same value multiplied by the jitter value
      probe-interval = 1 second

      # Max amount of jitter to be added on retries
      probe-interval-jitter = 0.2
    }

  }

}
