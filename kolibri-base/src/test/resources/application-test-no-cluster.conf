kolibri {
  actor-system = "testsystem"
  request {
    parallelism = 64
    useTracking = false
    useConnectionPoolFlow = false
    connection.pool.mode = "STANDARD"
    connection.pool.moduleClass = ""
    responseToStrictTimeoutInMs = 3000
    responseToStrictTimeoutInMs = ${?RESPONSE_TO_STRICT_TIMEOUT_IN_MS}
  }
  job {
   timeoutInSeconds = 1800
   processingCheckResourcesIntervalInMillis = 100
   runningTasksPerJobMaxCount = 3
   runningTasksPerJobDefaultCount = 3
   batchDistributionIntervalInMs = 100
   batchMaxTimeToACKInMs = 100
   resources {
   }
   tasks {
     waitForSynchronousTaskCompleteInMs = 100
   }
  }
  cluster {
    statusCheckTimeoutInMillis = 1000
    startClusterSingletonRouter = false
  }
  supervisor {
    maxNumOfRetries = 3
    maxNumOfRetriesWithinTimeInSeconds = 60
    houseKeepingIntervalInSeconds = 10
  }
  execution {
    runnableExecutionHouseKeepingIntervalInSeconds = 10
    aggregatingActorHouseKeepingIntervalInSeconds = 10
    aggregatingActorStateSendingIntervalInSeconds = 2
    workManagerStateUpdateIntervalInSeconds = 2
    workManagerReportBatchStateToJobManagerIntervalInSeconds = 2
    jobManagerCheckForCompletionIntervalInSeconds = 5
    useAggregatorBackpressure = true
    aggregatorResultReceiveParallelism = 200
    useResultElementGrouping = false
    resultElementGroupingCount = 500
    resultElementGroupingIntervalInMs = 500
    resultElementGroupingParallelism = 1
    maxNrBatchRetries = 1
  }
  format {
    metricDocumentFormatType = "parameter"
    judgements {
      sourceType = "CSV"
      judgementKeyQueryAndProductDelimiter = "\u0000"
      jsonLines {
        queryPath = "query"
        queryPath = ${?JUDGEMENT_FILE_JSON_LINES_QUERY_PATH}
        productsPath = "products"
        productsPath = ${?JUDGEMENT_FILE_JSON_LINES_PRODUCTS_PATH}
        productIdSelector = "productId"
        productIdSelector = ${?JUDGEMENT_FILE_JSON_LINES_PRODUCT_ID_SELECTOR}
        judgementSelector = "score"
        judgementSelector = ${?JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_SELECTOR}
        judgementValueTypeCast = "DOUBLE"
        judgementValueTypeCast = ${?JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_VALUE_TYPE_CAST}
      }
      csv {
        judgementFileColumnDelimiter = "\u0000"
        judgementFileColumnDelimiter = ${?JUDGEMENT_FILE_CSV_COLUMN_DELIMITER}
        judgementFileIgnoreLessThanColumns = 3
        judgementFileIgnoreLessThanColumns = ${?JUDGEMENT_FILE_CSV_IGNORE_LESS_THAN_COLUMNS}
        judgementFileJudgementColumn = 2
        judgementFileJudgementColumn = ${?JUDGEMENT_FILE_CSV_JUDGEMENT_COLUMN}
        judgementFileSearchTermColumn = 0,
        judgementFileSearchTermColumn = ${?JUDGEMENT_FILE_CSV_SEARCH_TERM_COLUMN}
        judgementFileProductIdColumn = 1
        judgementFileProductIdColumn = ${?JUDGEMENT_FILE_CSV_PRODUCT_ID_COLUMN}
      }
    }
  }
  persistence {
    mode = "RESOURCE"
    mode = ${?PERSISTENCE_MODE}
    directoryPathSeparator = "/"
    directoryPathSeparator = ${?DIRECTORY_PATH_SEPARATOR}
    csvColumnSeparator = "\t"
    csvColumnSeparator = ${?CSV_COLUMN_SEPARATOR}
    local {
      writeBasePath = ""
      writeBasePath = ${?LOCAL_STORAGE_WRITE_BASE_PATH}
      writeResultsSubPath = ""
      writeResultsSubPath = ${?LOCAL_STORAGE_WRITE_RESULTS_SUBPATH}
      readBasePath = ""
      readBasePath = ${?LOCAL_STORAGE_READ_BASE_PATH}
      resources {
        readBasePath = ""
        readBasePath = ${?LOCAL_RESOURCES_READ_BASE_PATH}
      }
    }
    templates {
      jobTemplatesPath = ${?JOB_TEMPLATES_PATH}
    }
    inputs {
      dataPath = ${?INPUT_DATA_PATH}
    }
    outputs {
      resultsPath = ${?OUTPUT_RESULTS_PATH}
    }
  }
  internal {
    analyzeTimeoutInSeconds = 30
  }
  ssl {
    useInsecureEngine = false
  }
  state {
    useShardingAndEndpoints = false
  }
}

# overrides for akka-kryo-serialization lib (reference: https://github.com/altoo-ag/akka-kryo-serialization/blob/master/akka-kryo-serialization/src/main/resources/reference.conf)
akka-kryo-serialization {

    #max-buffer-size = 2147483639
    max-buffer-size = -1
    buffer-size = 4096
    post-serialization-transformations = "lz4"
    # kryo-reference-map = true

}

akka {
    actor {
      # enable serialization of messages also between local actors (testing purposes)
      serialize-messages = off
      # verify props are serializable
      serialize-creators = off
      provider = "akka.actor.LocalActorRefProvider"
      serializers {
        # https://doc.akka.io/docs/akka/current/serialization-jackson.html
        jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
        # https://github.com/altoo-ag/akka-kryo-serialization
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "com.google.protobuf.Message" = proto
        "de.awagen.kolibri.datatypes.io.KolibriSerializable" = kryo
      }
      allow-java-serialization = off
      default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
           parallelism-factor: 0.25,
           parallelism-max: 2,
           parallelism-min: 1
         }
      }
    }
}

#custom dispatcher
kolibri-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 0.75
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 5
}
