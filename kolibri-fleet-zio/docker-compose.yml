version: '3.5'

services:

  prometheus:
    image: prom/prometheus:v2.28.1
    cpu_count: 2
    mem_limit: 512m
    mem_reservation: 512m
    ports:
      - "9000:9090"
    user: "1000:1000"
    volumes:
      - ./prometheus:/etc/prometheus
      # /prometheus is the default data dir
      - ./prometheus/data:/prometheus/data
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:8.0.5
    cpu_count: 2
    mem_limit: 256m
    mem_reservation: 256m
    volumes:
      - ./grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    # user setting needed to be set to owner/group of the volume (above grafana folder on host machine)
    user: "1000:1000"

  kolibri-zio-1:
    image: kolibri-fleet-zio:0.2.1
    cpu_count: 12
    mem_limit: 6144m
    mem_reservation: 4096m
    ports:
      - "8001:8001"
    user: "1000:1000"
    environment:
      JVM_OPTS: >
        -XX:+UseParallelGC
        -XX:ParallelGCThreads=2
        -Xms4096m
        -Xmx4096m
      PROFILE: prod
      NODE_HASH: "abc1"
      HTTP_SERVER_PORT: 8001
      PERSISTENCE_MODE: 'CLASS'
      PERSISTENCE_MODULE_CLASS: 'de.awagen.kolibri.fleet.zio.config.di.modules.persistence.LocalPersistenceModule'
      AWS_PROFILE: 'developer'
      AWS_S3_BUCKET: 'kolibri-dev'
      AWS_S3_PATH: 'kolibri_fleet_zio_test'
      AWS_S3_REGION: 'EU_CENTRAL_1'
      # the file path in the job definitions are to be given relative to the path (or bucket path) defined
      # for the respective configuration of persistence
      LOCAL_STORAGE_WRITE_BASE_PATH: '/app/test-files'
      LOCAL_STORAGE_READ_BASE_PATH: '/app/test-files'
      # JOB_TEMPLATES_PATH must be relative to the base path or bucket path, depending on the persistence selected
      JOB_TEMPLATES_PATH: 'templates/jobs'
      OUTPUT_RESULTS_PATH: 'test-results'
      JUDGEMENT_FILE_SOURCE_TYPE: 'CSV'
      # if judgement file format set to 'JSON_LINES', need to set 'DOUBLE' in case judgements are numeric in the json,
      # if the numeric value is represented as string, use 'STRING'. This purely refers to how the json value is interpreted,
      # later this will be cast to double either way
      JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_VALUE_TYPE_CAST: 'STRING'
      ALLOWED_TIME_PER_ELEMENT_IN_MILLIS: 4000
      ALLOWED_TIME_PER_BATCH_IN_SECONDS: 3600
      ALLOWED_TIME_PER_JOB_IN_SECONDS: 36000
      MAX_RESOURCE_DIRECTIVES_LOAD_TIME_IN_MINUTES: 10
      MAX_PARALLEL_ITEMS_PER_BATCH: 16
      CONNECTION_POOL_SIZE_MIN: 100
      CONNECTION_POOL_SIZE_MAX: 100
      CONNECTION_TTL_IN_SECONDS: 1200
      MAX_NR_JOBS_PROCESSING: 5
      MAX_NR_JOBS_CLAIMED: 5
      NETTY_HTTP_CLIENT_THREADS_MAX: -1
      BLOCKING_POOL_THREADS: -1
      NON_BLOCKING_POOL_THREADS: -1
    volumes:
      - ./tmp_data:/app/test-files
      - ${HOME}/.aws/credentials:/home/kolibri/.aws/credentials:ro

  # NOTE: starting response-juggler requires cloning https://github.com/awagen/response-juggler and building
  # the image locally via 'docker build -t response-juggler:0.1.0 .'. It will respond to each request with a random
  # sampling of the comma-separated PID_SAMPLEs, each result containing between MIN_PRODUCTS and MAX_PRODUCTS.
  # If another response structure needed, this can easily be adjusted within the response-juggler
  search-service-1:
    image: awagen/response-juggler:0.1.1
    user: "1000:1000"
    cpu_count: 2
    mem_reservation: 512m
    mem_limit: 512m
    environment:
      PORT: 80
      NUM_CONNECTIONS: 400
      RESPONSE_MAIN_TEMPLATE: "searchresponse.json"
      RESPONSE_PARTIAL_IDENT_DOCS: "{{DOCS}}"
      RESPONSE_PARTIAL_CONTENT_DOCS: "doc_bool_flag.json"
      RESPONSE_PARTIAL_SAMPLER_TYPE_DOCS: "LIST"
      RESPONSE_PARTIAL_SAMPLER_MIN_NUM_DOCS: 5
      RESPONSE_PARTIAL_SAMPLER_MAX_NUM_DOCS: 20
      RESPONSE_FIELD_IDENT_PID: "{{PID}}"
      RESPONSE_FIELD_SAMPLER_TYPE_PID: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_PID: "STRING"
      RESPONSE_FIELD_SAMPLER_SELECTION_PID: "p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19"
      RESPONSE_FIELD_IDENT_BOOL: "{{BOOL}}"
      RESPONSE_FIELD_SAMPLER_TYPE_BOOL: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_BOOL: "BOOL"
      RESPONSE_FIELD_SAMPLER_SELECTION_BOOL: "True,False"
      RESPONSE_FIELD_IDENT_NUM_FOUND: "{{NUM_FOUND}}"
      RESPONSE_FIELD_SAMPLER_TYPE_NUM_FOUND: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_NUM_FOUND: "INT"
      RESPONSE_FIELD_SAMPLER_SELECTION_NUM_FOUND: "1,5,6,8,10,12,100,50,200"
      RESPONSE_FIELD_IDENT_STRING_VAL1: "{{STRING_VAL1}}"
      RESPONSE_FIELD_SAMPLER_TYPE_STRING_VAL1: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_STRING_VAL1: "STRING"
      RESPONSE_FIELD_SAMPLER_SELECTION_STRING_VAL1: "p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19"
    ports:
      - "80:80"

  search-service-2:
    image: awagen/response-juggler:0.1.1
    user: "1000:1000"
    cpu_count: 2
    mem_reservation: 512m
    mem_limit: 512m
    environment:
      PORT: 81
      NUM_CONNECTIONS: 400
      RESPONSE_MAIN_TEMPLATE: "searchresponse.json"
      RESPONSE_PARTIAL_IDENT_DOCS: "{{DOCS}}"
      RESPONSE_PARTIAL_CONTENT_DOCS: "doc_bool_flag.json"
      RESPONSE_PARTIAL_SAMPLER_TYPE_DOCS: "LIST"
      RESPONSE_PARTIAL_SAMPLER_MIN_NUM_DOCS: 5
      RESPONSE_PARTIAL_SAMPLER_MAX_NUM_DOCS: 20
      RESPONSE_FIELD_IDENT_PID: "{{PID}}"
      RESPONSE_FIELD_SAMPLER_TYPE_PID: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_PID: "STRING"
      RESPONSE_FIELD_SAMPLER_SELECTION_PID: "p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19"
      RESPONSE_FIELD_IDENT_BOOL: "{{BOOL}}"
      RESPONSE_FIELD_SAMPLER_TYPE_BOOL: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_BOOL: "BOOL"
      RESPONSE_FIELD_SAMPLER_SELECTION_BOOL: "True,False"
      RESPONSE_FIELD_IDENT_NUM_FOUND: "{{NUM_FOUND}}"
      RESPONSE_FIELD_SAMPLER_TYPE_NUM_FOUND: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_NUM_FOUND: "INT"
      RESPONSE_FIELD_SAMPLER_SELECTION_NUM_FOUND: "1,5,6,8,10,12,100,50,200"
      RESPONSE_FIELD_IDENT_STRING_VAL1: "{{STRING_VAL1}}"
      RESPONSE_FIELD_SAMPLER_TYPE_STRING_VAL1: "SINGLE"
      RESPONSE_FIELD_SAMPLER_ELEMENT_CAST_STRING_VAL1: "STRING"
      RESPONSE_FIELD_SAMPLER_SELECTION_STRING_VAL1: "p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19"
    ports:
      - "81:81"

#  kolibri-watch:
#    image: awagen/kolibri-watch:0.2.0
#    environment:
#      KOLIBRI_BASE_URL: "http://localhost:8000"
#    ports:
#      - "82:80"