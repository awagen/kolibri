kolibri {
  nodeHash = ${?NODE_HASH}
  port = "8080"
  port = ${?HTTP_SERVER_PORT}
  nonBlockingPoolThreads = -1
  nonBlockingPoolThreads = ${?NON_BLOCKING_POOL_THREADS}
  blockingPoolThreads = -1
  blockingPoolThreads = ${?BLOCKING_POOL_THREADS}
  netty {
    httpClientThreadsMax = -1
    httpClientThreadsMax = ${?NETTY_HTTP_CLIENT_THREADS_MAX}
  }
  health {
    nodeHealthBaseFolder = "nodeStates"
    maxTimeBetweenHealthUpdatesInSeconds = 30
    maxTimeBetweenHealthUpdatesInSeconds = ${?MAX_TIME_BETWEEN_HEALTH_UPDATES_IN_SECONDS}
  }
  request {
    connectionPoolSizeMin = 10
    connectionPoolSizeMin = ${?CONNECTION_POOL_SIZE_MIN}
    connectionPoolSizeMax = 100
    connectionPoolSizeMax = ${?CONNECTION_POOL_SIZE_MAX}
    connectionTTLInSeconds = 600
    connectionTTLInSeconds = ${?CONNECTION_TTL_IN_SECONDS}
    connectionTimeoutInSeconds = 10
    connectionTimeoutInSeconds = ${?CONNECTION_TIMEOUT_IN_SECONDS}
    connectionPoolType = "FIXED"
    connectionPoolType = ${?CONNECTION_POOL_TYPE}
    target {
      allowedHosts = "*"
      allowedHosts = ${?TARGET_ALLOWED_HOSTS}
      allowedPorts = "*"
      allowedPorts = ${?TARGET_ALLOWED_PORTS}
    }
  }
  job {
   resources {
     directives {
        maxLoadTimeInMinutes = 10
        maxLoadTimeInMinutes = ${?MAX_RESOURCE_DIRECTIVES_LOAD_TIME_IN_MINUTES}
     }
   }
   basefolder = "jobs"
   openJobsSubfolder = "open"
   doneJobsSubfolder = "done"
   tasks {
     # max nr of jobs to be claimed by this node at any given time (claimed means successfully claimed,
     # e.g put into in-progress state subfolder for the node)
     maxNrJobsClaimed = 10
     maxNrJobsClaimed = ${?MAX_NR_JOBS_CLAIMED}
     # max nr of jobs to be processed at the same time. Needs to be smaller or equal to maxNrJobsClaimed
     # since unclaimed jobs are not processed.
     maxNrJobsProcessing = 5
     maxNrJobsProcessing = ${?MAX_NR_JOBS_PROCESSING}
     maxNrJobsHistory = 100
     maxNrJobsHistory = ${?MAX_NR_JOBS_HISTORY}
     basefolder = "tasks"
     claimSubFolder = "claims"
     openTasksSubFolder = "open"
     doneTasksSubFolder = "done"
     inProgressStateTasksSubFolder = "inprogress_state"
   }
  }
  execution {
      maxBatchTaskRetries = 3
      maxBatchTaskRetries = ${?MAX_BATCH_TASK_RETRIES}
      maxParallelItemsPerBatch = 16
      maxParallelItemsPerBatch = ${?MAX_PARALLEL_ITEMS_PER_BATCH}
      maxTimeBetweenUpdatesInSeconds = 120
      maxTimeBetweenUpdatesInSeconds = ${?MAX_TIME_BETWEEN_UPDATES_IN_SECONDS}
      resultQueueSize = -1
      resultQueueSize = ${?RESULT_QUEUE_SIZE}
  }
  format {
    metricDocumentFormatTypes = "csv,json"
    metricDocumentFormatTypes = ${?METRIC_DOCUMENT_FORMAT_TYPES}
    judgements {
      sourceType = "CSV"
      sourceType = ${?JUDGEMENT_FILE_SOURCE_TYPE}
      judgementKeyQueryAndProductDelimiter = "\u0000"
      jsonLines {
        queryPath = "query"
        queryPath = ${?JUDGEMENT_FILE_JSON_LINES_QUERY_PATH}
        productsPath = "products"
        productsPath = ${?JUDGEMENT_FILE_JSON_LINES_PRODUCTS_PATH}
        productIdSelector = "productId"
        productIdSelector = ${?JUDGEMENT_FILE_JSON_LINES_PRODUCT_ID_SELECTOR}
        judgementSelector = "score"
        judgementSelector = ${?JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_SELECTOR}
        judgementValueTypeCast = "DOUBLE"
        judgementValueTypeCast = ${?JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_VALUE_TYPE_CAST}
      }
      csv {
        judgementFileColumnDelimiter = "\u0000"
        judgementFileColumnDelimiter = ${?JUDGEMENT_FILE_COLUMN_DELIMITER}
        judgementFileIgnoreLessThanColumns = 3
        judgementFileIgnoreLessThanColumns = ${?JUDGEMENT_FILE_IGNORE_LESS_THAN_COLUMNS}
        judgementFileJudgementColumn = 2
        judgementFileJudgementColumn = ${?JUDGEMENT_FILE_JUDGEMENT_COLUMN}
        judgementFileSearchTermColumn = 0,
        judgementFileSearchTermColumn = ${?JUDGEMENT_FILE_SEARCH_TERM_COLUMN}
        judgementFileProductIdColumn = 1
        judgementFileProductIdColumn = ${?JUDGEMENT_FILE_PRODUCT_ID_COLUMN}
      }
    }
  }
  persistence {
    mode = ${?PERSISTENCE_MODE}
    moduleClass = ${?PERSISTENCE_MODULE_CLASS}
    directoryPathSeparator = "/"
    directoryPathSeparator = ${?DIRECTORY_PATH_SEPARATOR}
    s3 {
      bucket = ${?AWS_S3_BUCKET}
      bucketPath = ${?AWS_S3_PATH}
      region = ${?AWS_S3_REGION}
    }
    gs {
      bucket = ${?GCP_GS_BUCKET}
      bucketPath = ${?GCP_GS_PATH}
      projectID = ${?GCP_GS_PROJECT_ID}
    }
    local {
      writeBasePath = ""
      writeBasePath = ${?LOCAL_STORAGE_WRITE_BASE_PATH}
      readBasePath = ""
      readBasePath = ${?LOCAL_STORAGE_READ_BASE_PATH}
      resources {
        readBasePath = ""
        readBasePath = ${?LOCAL_RESOURCES_READ_BASE_PATH}
      }
    }
    templates {
      jobTemplatesPath = "templates"
      jobTemplatesPath = ${?JOB_TEMPLATES_PATH}
    }
    outputs {
      resultsPath = "results"
      resultsPath = ${?OUTPUT_RESULTS_PATH}
    }
  }
}
