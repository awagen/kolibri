kolibri {
  appName = "KolibriApp"
  request {
    parallelism = 32
    target {
      allowedHosts = "*"
      allowedHosts = ${?TARGET_ALLOWED_HOSTS}
      allowedPorts = "*"
      allowedPorts = ${?TARGET_ALLOWED_PORTS}
      allowedContextPaths = "*"
      allowedContextPaths = ${?TARGET_ALLOWED_CONTEXT_PATH}
    }
  }
  job {
   basefolder = "jobs"
   openJobsSubfolder = "open"
   doneJobsSubfolder = "done"
   batchStateUpdateInitialDelayInSeconds = 2
   batchStateUpdateIntervalInSeconds = 10
   processingCheckResourcesIntervalInMillis = 100
   runningTasksPerJobMaxCount = 5
   runningTasksPerJobDefaultCount = 2
   allowedTimePerElementInMillis = 2000
   allowedTimePerBatchInSeconds = 1200
   allowedTimePerJobInSeconds = 14400
   resources {
     directives {
       maxLoadTimeInMinutes = 5
       maxLoadTimeInMinutes = ${?MAX_RESOURCE_DIRECTIVES_LOAD_TIME_IN_MINUTES}
     }
     judgements {
       topKJudgementsPerQueryStorageSize = 100
     }
   }
   # folder structure: top-level "jobs" folder, then "done"/"open",
   # in there then specific job folders that contain "job.json" at highest
   # level and a "tasks" subfolder with the following subfolders:
   # "open", "claims", "inprogress_state" (we dont need another inprogress,
   # since the files indicating in progress can carry the processing
   # state information as well)
   tasks {
     waitForSynchronousTaskCompleteInMs = 100
     basefolder = "tasks"
     claimSubFolder = "claims"
     openTasksSubFolder = "open"
     doneTasksSubFolder = "done"
     inProgressStateTasksSubFolder = "inprogress_state"
   }
  }
  execution {
    maxNrBatchRetries = 2
  }
  format {
    metricDocumentFormatTypes = "csv,json"
    metricDocumentFormatTypes = ${?METRIC_DOCUMENT_FORMAT_TYPES}
    judgements {
      sourceType = "CSV"
      judgementKeyQueryAndProductDelimiter = "\u0000"
      jsonLines {
        queryPath = "query"
        queryPath = ${?JUDGEMENT_FILE_JSON_LINES_QUERY_PATH}
        productsPath = "products"
        productsPath = ${?JUDGEMENT_FILE_JSON_LINES_PRODUCTS_PATH}
        productIdSelector = "productId"
        productIdSelector = ${?JUDGEMENT_FILE_JSON_LINES_PRODUCT_ID_SELECTOR}
        judgementSelector = "score"
        judgementSelector = ${?JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_SELECTOR}
        judgementValueTypeCast = "DOUBLE"
        judgementValueTypeCast = ${?JUDGEMENT_FILE_JSON_LINES_JUDGEMENT_VALUE_TYPE_CAST}
      }
      csv {
        judgementFileColumnDelimiter = "\u0000"
        judgementFileColumnDelimiter = ${?JUDGEMENT_FILE_COLUMN_DELIMITER}
        judgementFileIgnoreLessThanColumns = 3
        judgementFileIgnoreLessThanColumns = ${?JUDGEMENT_FILE_IGNORE_LESS_THAN_COLUMNS}
        judgementFileJudgementColumn = 2
        judgementFileJudgementColumn = ${?JUDGEMENT_FILE_JUDGEMENT_COLUMN}
        judgementFileSearchTermColumn = 0,
        judgementFileSearchTermColumn = ${?JUDGEMENT_FILE_SEARCH_TERM_COLUMN}
        judgementFileProductIdColumn = 1
        judgementFileProductIdColumn = ${?JUDGEMENT_FILE_PRODUCT_ID_COLUMN}
      }
    }
  }
  persistence {
    mode = "LOCAL"
    mode = ${?PERSISTENCE_MODE}
    moduleClass = "de.awagen.kolibri.fleet.zio.config.di.modules.persistence.LocalPersistenceModule"
    moduleClass = ${?PERSISTENCE_MODULE_CLASS}
    directoryPathSeparator = "/"
    directoryPathSeparator = ${?DIRECTORY_PATH_SEPARATOR}
    csvColumnSeparator = "\t"
    csvColumnSeparator = ${?CSV_COLUMN_SEPARATOR}
    local {
      writeBasePath = "kolibri-fleet-zio/tmp_data"
      writeBasePath = ${?LOCAL_STORAGE_WRITE_BASE_PATH}
      writeResultsSubPath = ""
      writeResultsSubPath = ${?LOCAL_STORAGE_WRITE_RESULTS_SUBPATH}
      readBasePath = "kolibri-fleet-zio/tmp_data"
      readBasePath = ${?LOCAL_STORAGE_READ_BASE_PATH}
      resources {
        readBasePath = ""
        readBasePath = ${?LOCAL_RESOURCES_READ_BASE_PATH}
      }
    }
    templates {
      jobTemplatesPath = ${?JOB_TEMPLATES_PATH}
    }
    inputs {
      dataPath = ${?INPUT_DATA_PATH}
    }
    outputs {
      resultsPath = ${?OUTPUT_RESULTS_PATH}
    }
  }
  internal {
    jobStatusRequestTimeoutInSeconds = 3
    analyzeTimeoutInSeconds = 30
  }
}
