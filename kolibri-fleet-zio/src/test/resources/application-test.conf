kolibri {
  appName = "KolibriApp"
  nodeHash = "abc234"
  port = "8080"
  health {
    nodeHealthBaseFolder = "nodeStates"
    maxTimeBetweenHealthUpdatesInSeconds = 30
  }
  request {
    parallelism = 32
    target {
      allowedHosts = "*"
      allowedPorts = "*"
      allowedContextPaths = "*"
    }
  }
  job {
   basefolder = "jobs"
   openJobsSubfolder = "open"
   doneJobsSubfolder = "done"
   batchStateUpdateInitialDelayInSeconds = 2
   batchStateUpdateIntervalInSeconds = 10
   processingCheckResourcesIntervalInMillis = 100
   runningTasksPerJobMaxCount = 5
   runningTasksPerJobDefaultCount = 2
   allowedTimePerElementInMillis = 2000
   allowedTimePerBatchInSeconds = 1200
   allowedTimePerJobInSeconds = 14400
   resources {
     directives {
       maxLoadTimeInMinutes = 5
     }
     judgements {
       topKJudgementsPerQueryStorageSize = 100
     }
   }
   # folder structure: top-level "jobs" folder, then "done"/"open",
   # in there then specific job folders that contain "job.json" at highest
   # level and a "tasks" subfolder with the following subfolders:
   # "open", "claims", "inprogress_state" (we dont need another inprogress,
   # since the files indicating in progress can carry the processing
   # state information as well)
   tasks {
     # max nr of jobs to be claimed by this node at any given time (claimed means successfully claimed,
     # e.g put into in-progress state subfolder for the node)
     maxNrJobsClaimed = 10
     # max nr of jobs to be processed at the same time. Needs to be smaller or equal to maxNrJobsClaimed
     # since unclaimed jobs are not processed.
     maxNrJobsProcessing = 5
     maxNrJobsHistory = 100
     waitForSynchronousTaskCompleteInMs = 100
     basefolder = "tasks"
     claimSubFolder = "claims"
     openTasksSubFolder = "open"
     doneTasksSubFolder = "done"
     inProgressStateTasksSubFolder = "inprogress_state"
   }
  }
  execution {
    maxBatchTaskRetries = 3
    maxNrBatchRetries = 2
    maxParallelItemsPerBatch = 16
    maxTimeBetweenUpdatesInSeconds = 120
  }
  format {
    metricDocumentFormatTypes = "csv,json"
    judgements {
      sourceType = "CSV"
      judgementKeyQueryAndProductDelimiter = "\u0000"
      jsonLines {
        queryPath = "query"
        productsPath = "products"
        productIdSelector = "productId"
        judgementSelector = "score"
        judgementValueTypeCast = "DOUBLE"
      }
      csv {
        judgementFileColumnDelimiter = "\u0000"
        judgementFileIgnoreLessThanColumns = 3
        judgementFileJudgementColumn = 2
        judgementFileSearchTermColumn = 0,
        judgementFileProductIdColumn = 1
      }
    }
  }
  persistence {
    mode = "LOCAL"
    moduleClass = "de.awagen.kolibri.fleet.zio.config.di.modules.persistence.LocalPersistenceModule"
    directoryPathSeparator = "/"
    csvColumnSeparator = "\t"
    local {
      writeBasePath = "kolibri-fleet-zio/tmp_data"
      writeResultsSubPath = ""
      readBasePath = "kolibri-fleet-zio/tmp_data"
      resources {
        readBasePath = ""
      }
    }
    templates {
      jobTemplatesPath = ""
    }
    inputs {
      dataPath = ""
    }
    outputs {
      resultsPath = ""
    }
  }
  internal {
    jobStatusRequestTimeoutInSeconds = 3
    analyzeTimeoutInSeconds = 30
  }
}
