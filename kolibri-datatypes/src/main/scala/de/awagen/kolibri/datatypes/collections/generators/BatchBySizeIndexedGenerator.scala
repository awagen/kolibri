/**
  * Copyright 2021 Andreas Wagenmann
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

package de.awagen.kolibri.datatypes.collections.generators

import de.awagen.kolibri.datatypes.types.SerializableCallable


/**
  * Generator that takes a sequence generator and iterates over batches of given size
  * @param generator the generator of Seq[T] elements
  * @param batchSize the number of Seq[T] elements per generator this generator produces. The last element might be
  *                  smaller than batchSize e.g if nrOfElements modulo batchSize > 0
  * @tparam T type of Seq[T] generated by the partial generators and the initially passed to-be-splitted generator
  */
case class BatchBySizeIndexedGenerator[+T](generator: IndexedGenerator[Seq[T]], batchSize: Int) extends IndexedGenerator[IndexedGenerator[Seq[T]]] {

  override val nrOfElements: Int = math.ceil(generator.size.toFloat / batchSize).toInt

  /**
    * create generator that only generates a part of the original generator.
    *
    * @param startIndex : startIndex (inclusive)
    * @param endIndex   : endIndex (exclusive)
    * @return generator generating the subpart of the generator as given by startIndex and endIndex
    */
  override def getPart(startIndex: Int, endIndex: Int): IndexedGenerator[IndexedGenerator[Seq[T]]] = {
    val start = math.min(math.max(0, startIndex), nrOfElements - 1)
    val end = math.max(start, math.min(endIndex, nrOfElements))
    ByFunctionNrLimitedIndexedGenerator(end - start, x => get(start + x))
  }

  /**
    * Get the index-th element
    *
    * @param index
    * @return
    */
  override def get(index: Int): Option[IndexedGenerator[Seq[T]]] = {
    if (index >= nrOfElements | index < 0) None
    else Some(generator.getPart(index * batchSize, (index + 1) * batchSize))
  }

  /**
    * Provided a mapping function, create generator of new type where elements are created by current generator
    * and then mapped by the provided function
    *
    * @param f : mapping function
    * @tparam B : the type the original element type is mapped to
    * @return : new generator providing the new type
    */
  override def mapGen[B](f: SerializableCallable.SerializableFunction1[IndexedGenerator[Seq[T]], B]): IndexedGenerator[B] = {
    new ByFunctionNrLimitedIndexedGenerator[B](nrOfElements, x => get(x).map(f))
  }
}
